{
  "hash": "e69fa33806124c2dc634df7d44c42b67",
  "result": {
    "markdown": "---\ntitle: \"Formation R - Collection de packages tidyverse\"\nauthor: \n  - Monique Simier, monique.simier@ird.fr \n  - Laure Velez, laure.velez@umontpellier.fr\n  - Gael Mariani, gael.mariani@umontpellier.fr\n  - Mathieu Depetris, mathieu.depetris@ird.fr\ndate: last-modified\t\ndate-format: DD/MM/YYYY\nformat: \n  revealjs:\n    target: \"_blank\"\n    scrollable: true\n    slide-number: c/t\n    chalkboard: true\n    title-slide-attributes:\n      data-background-image: images/background_title.png\n      data-background-size: cover  \n    theme: template/theme_perso.scss\n    logo: template/logo_marbec.png\n    footer: \"[https://github.com/umr-marbec/tidyverse-training](https://github.com/umr-marbec/tidyverse-training)\"\neditor: visual\nfig-caption: center\n---\n\n\n\n\n## Plan de la formation {.smaller}\n\n-   Préambule et introduction\n\n    -   Prérequis et environnement de travail nécessaire à la formation\n    -   Objectifs de la formation\n    -   Présentation de tidyverse\n\n-   Partie I : Manipulation de données avec `dplyr`\n\n-   Partie II : Nettoyage des données avec `tidyr`\n\n-   Partie III : Extension à la manipulation de données, cas spécifiques\n\n    -   Manipuler du texte avec `stringr`\n    -   Manipuler des dates avec `lubridate`\n\n-   Partie IV : Visualisation graphique avec `ggplot2`\n\n-   Partie V : Cas pratiques sur vos données\n\nFormation fortement inspirée du site de [Joseph Larmarange](https://larmarange.github.io/analyse-R/){target=\"_blank\"}\n\n# Préambule et introduction\n\n-   Prérequis et environnement de travail nécessaire à la formation\n-   Objectifs de la formation\n-   Présentation de tidyverse\n\n## Prérequis et environnement de travail nécessaire à la formation\n\n-   Avoir des notions de base dans l'utilisation de R\n-   Avoir une instance valide de [R](https://cran.r-project.org/){target=\"_blank\"} sur son poste (durant la formation utilisation de la version 4.2.1)\n-   Avoir installé correctement les versions des packages dplyr (utilisation de la version 1.0.10), lubridate (utilisation de la version 1.8.0), ggp- lot2 (utilisation de la version 3.3.6) et stringr (utilisation de la version 1.4.1)\n\n## Bonus non obligatoire\n\n-   Utilisation de l'environnement de développement [Rstudio](https://www.rstudio.com/products/rstudio/download/){target=\"_blank\"} (utilisation de la version 2022.07.1 Build 554 sous Windows)\n-   Pour les utilisateurs de Windows installation de [Rtools](https://cran.r-project.org/bin/windows/Rtools/){target=\"_blank\"} (utilisation de la version 4.2)\n-   Installation de [Visual Studio Code](https://code.visualstudio.com/#alt-downloads){target=\"_blank\"} (éditeur de code source autonome)\n-   Une instance de [Java](https://jdk.java.net/19/){target=\"_blank\"} (idéalement une version JDK = kit de développement + moteur d'exécution des programmes compilés + outils de compilation)\n\n## Objectifs de la formation\n\n::: columns\n::: {.column width=\"60%\"}\n-   Vous présenter un panel de ce que l'on peut faire avec ces nouvelles méthodes et surtout vous donner les clés pour aller plus loin\n-   Un expert n'est pas forcément quelqu'un qui connaît toutes les fonctions de R par cœur, mais qui sait écoute, comprendre et aller chercher les informations dont il a besoin\n    -   Pensez à jeter un coup d'œil aux [cheatsheets](https://github.com/rstudio/cheatsheets){target=\"_blank\"}\n-   Prendre le temps de discuter et de regarder vos données et/ou problèmes\n:::\n\n::: {.column width=\"40%\"}\n![](images/loi_pareto.jpg)\n:::\n:::\n\n## Présentation de Tidyverse {.smaller}\n\n::: columns\n::: {.column width=\"65%\"}\n-   Tidyverse c'est quoi ?\n    -   tidy + universe ou l'univers du «bien rangé» ou du rangement\n    -   Collection d'extensions conçues pour travailler ensemble et basées sur une philosophie commune\n    -   Le cœur du package inclut 8 packages\n        -   [ggplot2](https://ggplot2.tidyverse.org/){target=\"_blank\"} : création de graphiques\n        -   [dplyr](https://dplyr.tidyverse.org/){target=\"_blank\"} : manipulation de données au sens large\n        -   [tidyr](https://tidyr.tidyverse.org/){target=\"_blank\"} : manipulation de données plus orientées variables\n        -   [readr](https://readr.tidyverse.org/){target=\"_blank\"} : import\n        -   [purrr](https://purrr.tidyverse.org/){target=\"_blank\"} : fonction de vectorisation (remplacement des boucles classiques)\n        -   [tibble](https://tibble.tidyverse.org/){target=\"_blank\"} : «évolution» du data.frame\n        -   [stringr](https://stringr.tidyverse.org/){target=\"_blank\"} : manipulation de caractère\n        -   [forcats](https://forcats.tidyverse.org/){target=\"_blank\"} : série d'outils pour aider dans la manipulation des facteurs\n:::\n\n::: {.column width=\"35%\"}\n![](images/hadley_wickham.png){width=\"55%\"} ![](images/tidyverse_packages.png){width=\"55%\"}\n:::\n:::\n\n## Présentation de Tidyverse\n\n-   Lancement de la librairie\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n\n-   Cependant je vous déconseille de faire comme ça\n    -   En lançant cette commande, on charge dans R tous les packages associés à tidyverse (les 8 packages cités précédemment, mais aussi les dépendances associées)\n    -   Avez-vous vraiment besoin de tout cela ?\n    -   Potentiel impact sur vos futurs développements (surtout si vous commencez à développer des packages)\n    -   L'idée est d'appliquer dès maintenant les bonnes pratiques et surtout de comprendre ce que cela implique de ne pas les suivre (ce qui est aussi votre droit !)\n\n## Avant d'aller plus loin\n\n-   L'utilisation de ces packages permet de faire beaucoup de choses, mais ne rend pas tout le reste obsolète\n-   Il y a plusieurs stratégies pour réaliser une action, il faut juste trouver le bon compromis (connaissances, temps de calcul, contexte global de votre projet, ...)\n-   Attention aux règles et conventions de nommages\n    -   Règles pour nommer une variable (obligatoire) : ne pas commencer par un chiffre, pas d'espace, que des caractères alpha-numériques (A-z, 0-9) et le tiret du bas (\\_), ne pas utiliser de mots réservés (comme par exemple TRUE)\n    -   Conventions pour nommer une variable (recommandé) : uniquement des lettres minuscules, séparer les mots des \\_ et les noms choisis doivent pouvoir donner l'information du contenu associé\n\n# Partie I : Manipulation de données avec `dplyr` \n\n1.1. Importation de données sous R avec readr\n\n-   Des fonctions de base de R sont dédiées à l'import de fichiers textes de type csv (read.csv) ou avec séparateurs tabulation (read.table)\n-   La librairie readr propose des fonctions similaires sur le principe mais qui diffèrent des fonctions de base sur certains aspects\n-   Elles sont compatibles avec l'esprit Tidyverse car elles permettent de générer des tibbles \\# Partie III : Visualisation des données avec ggplot\n\n# Partie II : Nettoyage des données avec `tidyr`\n\n# Partie III : Extension à la manipulation de données, cas spécifiques\n\n## Manipuler du texte avec `stringr`\n\nUn package conçu pour manipuler les chaines de caractères \"facilement\". En plus d'être plus faciles à utiliser, le nom des fonctions dans `stringr` représentent bien ce qu'elles permettent de faire.\n\n![](images/stringr_logo.png){.absolute top=\"100\" right=\"20\" width=\"15%\"}\n\n. . .\n\nLe nom de toutes les fonctions dans `stringr` commence par `str_`.\\\n. . .\n\nVoici quelques exemples :\n\n::: columns\n::: {.column width=\"50%\"}\n::: incremental\n-   `str_detect` : Détection de caractères\n\n-   `str_extract` : Exctraction de caractères\n\n-   `str_replace` : Remplacement de caractères\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: incremental\n-   `str_trim` : Enlève les espaces\n\n-   `str_split` : Sépare une chaine de caractères\n\n-   `str_length` : Nombre de caractère\n:::\n:::\n:::\n\n. . .\n\n<center>Le cheat-sheet du package `stringr` est disponible [ici](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf).</center>\n\n### Les expressions régulères\n\nPour toi Mathieu ;)\n\n## Manipuler des dates avec `lubridate`\n\n# Partie IV : Visualisation des données avec `ggplot2`\n\n## Ggplot c'est comme la chirurgie *`aes`*thétique :\n\n::: incremental\n::: columns\n1)  Les jeunes s'y mettent très tôt !\n\n2)  Les moins jeunes sont réticents puis CERTAINS finissent par s'y mettre\n\n    <center>![](images/nancy_pelosi.jpg){width=\"20%\"}</center>\n\n3)  C'est un enchainement plus ou moins long d'opérations.\n\n    <center>![](images/bogdanoff1.jpg){width=\"21%\"}![](images/bogdanoff1.5.jpg){width=\"25%\"}![](images/bogdanoff2.jpg){width=\"25%\"}</center>\n:::\n:::\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Nuage de points](images/.png){width=\"\\\"30%\"}\n\n![Boxplots](images/.png){width=\"30%\"}\n\n![Violin Plot](images/.png){width=\"30%\"}\n:::\n\n<center>Un grand nombre d'exemples est disponible sur le site [***from Data to Viz***](https://www.data-to-viz.com/)</center>\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Barplot](images/barplot.png){width=\"30%\"}\n\n![Barplot](images/barplot2.png){width=\"30%\"}\n\n![Barplot Circulaire](images/Figure3.png){width=\"30%\"}\n:::\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Données temporelles](images/Series_temporelles.png){width=\"\\\"30%\"}\n\n![Données temporelles empillées](images/Diagramme_empile.png){width=\"30%\"}\n\n![Cartes](images/map2.png){width=\"30%\"}\n:::\n\n<center>Un grand notre d'exemples est disponible sur le site [***from Data to Viz***](https://www.data-to-viz.com/)</center>\n\n## \n\n## Ggplot, une succession de couches\n\n::: incremental\n::: columns\n::: column\n1.  La Structure\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-4-1.png){width=85%}\n    :::\n    :::\n\n:::\n\n::: column\n2.  Le type de représentation\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-6-1.png){width=85%}\n    :::\n    :::\n\n:::\n:::\n\n::: columns\n::: column\n3.  Les Couleurs\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-8-1.png){width=85%}\n    :::\n    :::\n\n:::\n\n::: column\n4.  Le Lifting final\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-10-1.png){width=85%}\n    :::\n    :::\n\n:::\n:::\n:::\n\n## La structure des données\n\nPour la démonstration nous allons utiliser le jeu de données `crabs` de la librairie `MASS`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\ndata_crabs <- crabs %>% dplyr::select(sp, sex, CL, CW)\n\ndata_crabs %>%\n  head(3) %>%\n  kbl(digits = 4, caption = \"Crabs data\") %>%\n  kable_classic(html_font = \"Computer Modern\", full_width = F)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Computer Modern; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Crabs data</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sp </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> CL </th>\n   <th style=\"text-align:right;\"> CW </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 16.1 </td>\n   <td style=\"text-align:right;\"> 19.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 18.1 </td>\n   <td style=\"text-align:right;\"> 20.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 19.0 </td>\n   <td style=\"text-align:right;\"> 22.4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Ggplot pas à pas\n\n### 1. Construction de la structure\n\n::: incremental\n<div>\n\nPour la structure du la figure, la fonction à toujours utiliser est `ggplot()` . Les arguments principaux sont :\n\n::: incremental\n-   `data = nom.du.dataframe`\n\n-   `mapping = aes(x = varaible.x, y = variable.y)`\n\n    ::: incremental\n    -   Ici le `aes` signifie **aesthetic**\n\n    -   On verra que d'autres options sont disponibles dans `aes` comme la taille (`size`), la couleur (`color`), la forme (`shape`) ...\n    :::\n:::\n\n</div>\n:::\n\n## Ggplot pas à pas\n\n### 1. Construction de la structure\n\n::: nonincremental\n<div>\n\nPour la structure du la figure, la fonction à toujours utiliser est `ggplot()` . Les arguments principaux sont :\n\n<div>\n\n-   `data = nom.du.dataframe`\n\n-   `mapping = aes(x = varaible.x, y = variable.y)`\n\n</div>\n\n</div>\n:::\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\ncouche.1 <- ggplot(data    = data_crabs,\n                   mapping = aes(x = CL, y = CW))\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n### 2. Choix du type de représentation\n\n::: incremental\n::: incremental\nPlusieurs représentations existent selon le type de variables que l'on a :\n:::\n\n::: columns\n::: column\n1.  **Une variable continue**\n\n    ::: incremental\n    -   `geom_histogram()`\n\n    -   `geom_density()`\n    :::\n:::\n\n::: column\n2.  **Deux variables continues**\n\n    ::: incremental\n    -   `geom_point()`\n    -   `geom_line()`\n    -   `geom_area()`\n    :::\n:::\n:::\n:::\n\n::: incremental\n::: columns\n::: column\n3.  **Une discrète & une continue**\n\n    ::: incremental\n    -   `geom_boxplot()`\n    -   `geom_violin()`\n    -   `geom_col()`\n    :::\n:::\n\n::: column\n4.  **Données spatiales**\n\n    ::: incremental\n    -   `geom_polygon()`\n\n    -   `geom_sf()`\n    :::\n:::\n:::\n:::\n\n## Ggplot pas à pas\n\n### 2. Choix du type de représentation\n\n::: incremental\nL'exemple ici va mener à la réalisation d'un **nuage de points**. Mais `ggplot2` fonctionne de la même façon pour construire un **diagramme en barres**, **une boite à moustache** ou autres.\n\n::: incremental\n::: columns\n::: {.column width=\"50%\"}\n-   `aes()` dans `ggplot()`\n\n\n    ::: {.cell warnings='false'}\n    \n    ```{.r .cell-code}\n    couche.2 <- couche.1 +\n      geom_point()\n    ```\n    :::\n\n:::\n\n::: {.column width=\"50%\"}\n-   `aes()` dans `geom_point()`\n\n\n    ::: {.cell warnings='false'}\n    \n    ```{.r .cell-code}\n    couche.2.2 <- ggplot() +\n      geom_point(data    = data_crabs,\n                 mapping = aes(x = CL, y = CW))\n    ```\n    :::\n\n:::\n:::\n:::\n:::\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n## Ggplot pas à pas {auto-animate=\"true\"}\n\nTraçons un modèle linéaire et ajoutons la formule et le R² correspondant\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncouche.3 <- couche.2 +\n  geom_smooth(color = \"red\", method = \"lm\") # le modèle linéaire \n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas {auto-animate=\"true\"}\n\nTraçons un modèle linéaire et ajoutons la formule et le R² correspondant\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncouche.3 <- couche.2 +\n  geom_smooth(color = \"red\", method = \"lm\") + # le modèle linéaire \n  stat_regline_equation(label.y = 52, aes(label = ..eq.label..)) # la formule\ncouche.3\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas {auto-animate=\"true\"}\n\nTraçons un modèle linéaire et ajoutons la formule et le R² correspondant\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncouche.3 <- couche.2 +\n  geom_smooth(color = \"red\", method = \"lm\") + # le modèle linéaire \n  stat_regline_equation(label.y = 52, aes(label = ..eq.label..)) + # la formule\n  stat_regline_equation(label.y = 48, aes(label = ..adj.rr.label..)) # R²\ncouche.3\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-32-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n4.  Différencions les mâles et les femelles avec de la couleur\n\n. . .\n\n=\\> Une couleur par ordre. Comme c'est lié à l'esthétisme de la figure, il faut retourner à l'argument `color` dans la fonction `aes`.\n\n. . .\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\ncouche.4 <- ggplot() +\n  geom_point(data    = data_crabs,\n             mapping = aes(x     = CL, \n                           y     = CW, \n                           color = sex))\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-36-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n5.  Modifions les couleurs des points + Le titre de la légende\n\n. . .\n\nPour cela, on peut utiliser la fonction `scale_color_manual()` et les arguments `name` et `values`.\n\n. . .\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\ncouche.5 <- couche.4 +\n  scale_color_manual(name   = \"Sex :\",\n                     values = c(\"M\" = \"darkblue\", \n                                \"F\" = \"darkgreen\"))\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n. . .\n\n<center>*Une autre façon de faire est d'utiliser la fonction `labs` qui permet de changer les diverses légendes (axes x et y + légende de couleur). A vous de jouer !!!*</center>\n\n## Ggplot pas à pas\n\n6.  Nommons proprement les axes + la légende\n\n. . .\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.6 <- couche.5 +\n  labs(x     = \"Carapace Length (mm)\",\n       y     = \"Carapace Width (mm)\",\n       color = \"Sex :\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-44-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n7.  Faisons deux plot en un en séparant les données pour les deux espèces.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncouche.7 <- couche.6 + facet_grid(~sp)\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-48-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n8.  Petit lifting de la couleur de l'arrière plan\n\n. . .\n\n\n::: {.cell layout=\"[30, 30, 30]\" layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.7 + theme_bw()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-50-1.png){fig-align='center' width=960}\n:::\n\n```{.r .cell-code}\ncouche.7 + theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-50-2.png){fig-align='center' width=960}\n:::\n\n```{.r .cell-code}\ncouche.7 + theme_dark()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-50-3.png){fig-align='center' width=960}\n:::\n:::\n\n\n. . .\n\n<center>Un tas de `theme_*` existent pour obtenir différentes formats d'arrière plan (voir [ici](http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements)). A vous de choisir votre préféré.</center>\n\n## Ggplot pas à pas\n\n9.  Le lifting final sur les légendes\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncouche.8 <- couche.7 +\n  theme_bw() +\n  theme(axis.text       = element_text(size = 11),\n        axis.title      = element_text(size = 13),\n        legend.position = \"right\",\n        legend.text     = element_text(size = 13),\n        legend.title    = element_text(size = 15))\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-54-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Une petite subtilité concernant les couleurs\n\n. . .\n\n***Exercice :***\n\n1.  *Construire un diagramme en barres représentant la biomasse de chacun des ordres.*\n2.  *Donner une couleur à chacune des barres. Vous devez choisir la couleur.*\n\n. . .\n\n::: incremental\nGgplot fait la différence entre :\n\n-   la couleur des contours -\\> `color = …`\n\n-   la couleur de remplissage -\\> `fill = …`\n:::\n\n. . .\n\nPour choisir ses couleurs de contour *vs.* de remplissage, on utilise les fonctions\\\n`scale_color_manual()` *vs.* `scale_fill_manual()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fish_data %>%\n#   group_by(order) %>%\n#   summarise(biomass = sum(biomass)) %>%\n#   ggplot() +\n#   geom_col(data    = fish_data,\n#                     mapping = aes(x = order, \n#                                            y = biomass, \n#                                            fill = order)) +\n#   scale_fill_manual(values = c(\"pink\", \"green\", \"red\", \"blue\", \"yellow\"))\n```\n:::\n\n\n## Une autre subtilité concernant les couleurs\n\n. . .\n\n***Exercice :***\n\n1.  *Construisez un nuage de points biomass\\~total*\n2.  *Coloriez les points en fonction de la variable abondance en BLEU.*\n\n. . .\n\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot <- ggplot() +\n#   geom_point(data    = fish_data,\n#                       mapping = aes(x = total, y = biomass, \n#                                              color = total))\n# plot + scale_color_manual(values = \"blue\")\n```\n:::\n\n:::\n\n. . .\n\n<center>On ne peut pas donner une seule couleur à une variable continue !</center>\n\n## Couleurs & variables continues\n\nIl existe 4 fonctions principales qui permettent de construire des pallettes de couleurs continues :\n\n::: incremental\n-   `scale_fill_contiuous` : avec une palette par defaut (nuances de bleus)\n\n-   `scale_fill_viridis_c` : Colorblind friendly.\n\n-   `scale_fill_distiller` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos).\\\n    Pour voir les palettes =\\> `RColorBrewer::display.brewer.all()`\n\n-   `scale_fill_gradient` : permet de créer ses propres gradients de couleurs. Des variantes existent selon le nombre de couleurs à définir. Il s'agit de `scale_fill_gradient2()` et `scale_fill_gradientn()`.\n:::\n\n. . .\n\n<center>Testons les une par une à partir de la figure suivante</center>\n\n## Couleurs & variables continues\n\n### `scale_color_continuous`\n\nLa plus simple, mais pas beaucoup d'options. C'est aussi la palette de couleur par défaut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot <- ggplot(faithfuld) +\n#   geom_tile(aes(waiting, eruptions, fill = density)) +\n#   labs(x = \"Waiting\", y = \"Eruptions\", fill = \"Density\") +\n#   theme_bw()\n\nplot <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  scale_x_continuous(NULL, expand = c(0, 0)) + \n  scale_y_continuous(NULL, expand = c(0, 0)) + \n  theme(legend.position = \"none\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout=\"[50, 50]\" layout-align=\"center\"}\n\n```{.r .cell-code}\nplot\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-62-1.png){fig-align='center' width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_continuous()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-62-2.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Couleurs & variables continues\n\n### `scale_color_viridis_c`\n\nDe belles palettes dont les nuances sont captées par les personnes albinos.\n\n. . .\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"viridis\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-64-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"inferno\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-64-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"turbo\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-64-3.png){width=960}\n:::\n:::\n\n:::\n\n## Couleurs & variables continues\n\n### `scale_fill_distiller()`\n\nPermet d'utiliser les palettes de couleurs issues de [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRColorBrewer::display.brewer.all()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-66-1.png){width=960}\n:::\n:::\n\n\n## Couleurs & variables continues\n\n### `scale_fill_distiller()`\n\n. . .\n\nPermet d'utiliser les palettes de couleurs issues de [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"Reds\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-68-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"YlGn\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-68-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-68-3.png){width=960}\n:::\n:::\n\n\n## Couleurs & variables continues\n\n### `scale_fill_distiller()`\n\nPetite info utile, toutes les palettes peuvent passer le test ***ColorBlind Friendly*** :\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"colorBlindness\")\n# install.packages(\"RColorBrewer\")\ncolor_pal <- RColorBrewer::brewer.pal(10, name=\"Spectral\")\ncolorBlindness::displayAllColors(color_pal)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-70-1.png){width=960}\n:::\n:::\n\n\n## Couleurs & variables continues\n\n### `scale_fill_gradient()`\n\nPermet de créer ces propres palettes de couleurs, à partir de 2, 3 ou n couleurs :\n\n::: incremental\n-   `scale_fill_gradient()` avec les arguments `low` et `high`.\n\n-   `scale_fill_gradient2()` avec les arguments `low`, `mid` et `high`.\n\n-   `scale_fill_gradientn()` avec l'argument `colours`.\n:::\n\n. . .\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_gradient(low = \"darkblue\", high = \"darkred\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-72-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_gradient2(low = \"darkblue\", mid = \"white\", high = \"darkred\", midpoint = 0.02)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-72-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_gradientn(colours = colorspace::diverge_hcl(7))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-72-3.png){width=960}\n:::\n:::\n\n\n## Couleurs & variable groupée en classes\n\nIl existe 3 fonctions principales qui permettent de construire ce type de pallettes de couleurs :\n\n::: incremental\n-   `scale_fill_binned` : avec une palette par defaut (nuances de bleus)\n\n-   `scale_fill_fermenter` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos).\\\n    Pour voir les palettes =\\> `RColorBrewer::display.brewer.all()`\n\n-   `scale_fill_steps` : permet de créer sa propre palette avec un nombre de classes précis. Des variantes existent selon le nombre de couleurs à définir. Il s'agit de `scale_fill_steps2()` et `scale_fill_stepsn()`.\n:::\n\n## Couleurs & variable groupée en classes\n\n### `scale_fill_binned()`\n\nLes couleurs sont par défaut des nuances de bleu. Certaines précisions peuvent cependant être apportées.\n\n. . .\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_binned(n.breaks = 4)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-74-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_binned(n.breaks = 7,\n                         guide = guide_colorsteps(show.limits = T))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-74-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_binned(breaks = quantile(faithfuld$density, \n                                           probs = (seq(0,1,0.3))))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-74-3.png){width=960}\n:::\n:::\n\n\n## Couleurs & variable groupée en classes\n\n### `scale_fill_fermenter()`\n\nLa fonction analogue à `scale_fill_distiller()` et `scale_fill_brewer()`.\n\n. . .\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"BuGn\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-76-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"BuGn\", direction = 1)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-76-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"RdBu\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-76-3.png){width=960}\n:::\n:::\n\n\n## Couleurs & variable groupée en classes\n\n### `scale_fill_steps()`\n\nFonction analogue à `scale_fill_gradient()`.\n\n::: incremental\n-   `scale_fill_steps()` avec les arguments `low` et `high`.\n\n-   `scale_fill_steps2()` avec les arguments `low`, `mid` et `high`.\n\n-   `scale_fill_stepsn()` avec l'argument `colours`.\n:::\n\n. . .\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_steps(low = \"darkblue\", high = \"darkred\", n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-78-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_steps2(low = \"darkblue\", mid = \"white\", high = \"darkred\", midpoint = 0.02, n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-78-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_stepsn(colors = magma(9), n.breaks = 9)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-78-3.png){width=960}\n:::\n:::\n\n\n## Couleurs & variables discrètes\n\nLes principales fonctions utilisées permettant de construire des pallettes de couleurs continues :\n\n::: incremental\n-   `scale_fill_discrete` : Couleurs par défaut\n\n-   `scale_fill_manual` : choix de la couleur parmis toutes les couleurs existantes.\n\n-   `scale_fill_brewer` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos). Equivalent de `scale_fill_distiller` pour les variables discrètes.\n:::\n\n## Couleurs & variables discrètes\n\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot() +\n  geom_violin(data    = data_crabs,\n              mapping = aes(x = sex, y = CL, fill = sex), \n              alpha   = 0.7) +\n  facet_wrap(~sp) +\n  theme_bw()\n```\n:::\n\n:::\n\n. . .\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_discrete()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-82-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_manual(values = c(\"M\" = \"darkblue\", \"F\" = \"darkgreen\"))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-82-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_brewer(palette = \"Set2\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-82-3.png){width=960}\n:::\n:::\n\n:::\n\n## Ressources utilisées\n\nhttps://ggplot2-book.org/scale-colour.html#colour-discrete\n\nhttps://stackoverflow.com/questions/70942728/understanding-color-scales-in-ggplot2\n\nhttps://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n\n## Utiliser ggplot pour détecter des erreurs dans les données\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fish_data <- read_csv(\"data/Global_reef_fish_abundance_and_biomass.csv\")\n# fish_data <- read_csv(\"data/Global_reef_fish_biomass.csv\")\n\n# survey <- read_delim(\"data/Survey_metadata.csv\", \n#      delim = \";\", escape_double = FALSE, trim_ws = TRUE, \n#      skip = 70)\n\n# Selection des données pour le site n°2000951\n# site1 <- fish_data %>%\n#   filter(survey_id == 2000951) %>%\n#   select(survey_id, class, order, family, species_name, total, biomass)\n# \n# site1 %>%\n#   head(5) %>% \n#   kbl(digits = 4, caption = \"Data to check\") %>% \n#   kable_classic(html_font = \"Computer Modern\", full_width = F)  \n```\n:::\n\n\n</center>\n\nComment détécter les outliers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = site1, mapping = aes(x = order, y = biomass)) +\n#   geom_boxplot() +\n#   theme_bw()\n```\n:::\n\n\n### Séparer les Elasmobranches des Actinoptérygiens\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = site1, mapping = aes(x = order, y = biomass)) +\n#   geom_boxplot() +\n#   facet_grid(.~class, scales = \"free\", space = \"free\") +\n#   theme_bw() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\nInterrogation au niveau des perciformes ...\n\n</center>\n\n### Qu'est-ce qu'il se passe avec les Perciformes ?\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# site1 %>%\n#   filter(order == \"Perciformes\") %>%\n#   ggplot(., mapping = aes(x = family, y = biomass)) +\n#   geom_boxplot() +\n#   theme_bw() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\n</center>\n",
    "supporting": [
      "tidyverse-training_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"tidyverse-training_files/libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"tidyverse-training_files/libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}