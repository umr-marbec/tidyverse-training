{
  "hash": "b784f97a0b08ce947d7b58ea32131d05",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    target: \"_blank\"\n    scrollable: true\n    slide-number: c/t\n    chalkboard: true\n    title-slide-attributes:\n      data-background-image: images/background_title.png\n      data-background-size: cover  \n    theme: template/theme_perso.scss\n    logo: template/logo_marbec.png\n    footer: \"[https://github.com/umr-marbec/tidyverse-training](https://github.com/umr-marbec/tidyverse-training)\"\neditor: visual\nfig-caption: center\n---\n\n\n\n\n#  {background-image=\"images/background_title.png\"}\n\n[Formation R]{style=\"color:#ffffff; font-size: 2em\"}\n\n[Collection de packages tidyverse]{style=\"color:#ffffff; font-size: 1.5em\"}\n\n[Monique Simier (monique.simier@ird.fr)]{style=\"color:#ffffff; font-size: 1em\"} <br/>\n[Laure Velez (laure.velez@umontpellier.fr)]{style=\"color:#ffffff; font-size: 1em\"} <br/>\n[Gael Mariani (gael.mariani@umontpellier.fr)]{style=\"color:#ffffff; font-size: 1em\"} <br/>\n[Mathieu Depetris (mathieu.depetris@ird.fr)]{style=\"color:#ffffff; font-size: 1em\"} <br/>\n<br/>\n[05-06 decembre 2022]{style=\"color:#ffffff; font-size: 1em\"}\n<br/>\n<br/>\n<br/>\n[© RStudio]{style=\"color:#ffffff; font-size: 0.4em\"}\n\n![](images/tidyverse_packages.png){.absolute top=\"60\" right=\"20\" width=\"35%\"}\n\n## Plan de la formation {.smaller}\n\n-   Préambule et introduction\n\n    -   Prérequis et environnement de travail nécessaire à la formation\n    -   Objectifs de la formation\n    -   Présentation de tidyverse\n\n-   Partie 1 : Manipulation de données avec dplyr\n\n    - 1.1 : Importation de données sous R\n    - 1.2 : Transformation des données avec dplyr\n\n-   Partie 2 : Extension à la manipulation de données, cas spécifiques\n\n    -   Manipuler du texte avec stringr\n    -   Manipuler des dates avec lubridate\n\n-   Partie 3 : Visualisation graphique avec ggplot2\n\n-   Partie 4 : Cas pratiques sur vos données\n\nFormation fortement inspirée du site de [Joseph Larmarange](https://larmarange.github.io/analyse-R/){target=\"_blank\"}\n\n# Préambule et introduction\n\n-   Prérequis et environnement de travail nécessaire à la formation\n-   Objectifs de la formation\n-   Présentation de tidyverse\n\n## Prérequis et environnement de travail nécessaire à la formation\n\n-   Avoir des notions de base dans l'utilisation de R\n-   Avoir une instance valide de [R](https://cran.r-project.org/){target=\"_blank\"} sur son poste (durant la formation utilisation de la version 4.2.1)\n-   Avoir installé correctement les versions des packages dplyr (utilisation de la version 1.0.10), lubridate (utilisation de la version 1.8.0), ggp- lot2 (utilisation de la version 3.3.6) et stringr (utilisation de la version 1.4.1)\n\n## Bonus non obligatoire\n\n-   Utilisation de l'environnement de développement [Rstudio](https://www.rstudio.com/products/rstudio/download/){target=\"_blank\"} (utilisation de la version 2022.07.1 Build 554 sous Windows)\n-   Pour les utilisateurs de Windows installation de [Rtools](https://cran.r-project.org/bin/windows/Rtools/){target=\"_blank\"} (utilisation de la version 4.2)\n-   Installation de [Visual Studio Code](https://code.visualstudio.com/#alt-downloads){target=\"_blank\"} (éditeur de code source autonome)\n-   Une instance de [Java](https://jdk.java.net/19/){target=\"_blank\"} (idéalement une version JDK = kit de développement + moteur d'exécution des programmes compilés + outils de compilation)\n\n## Objectifs de la formation\n\n::: columns\n::: {.column width=\"60%\"}\n-   Vous présenter un panel de ce que l'on peut faire avec ces nouvelles méthodes et surtout vous donner les clés pour aller plus loin\n-   Un expert n'est pas forcément quelqu'un qui connaît toutes les fonctions de R par cœur, mais qui sait écoute, comprendre et aller chercher les informations dont il a besoin\n    -   Pensez à jeter un coup d'œil aux [cheatsheets](https://github.com/rstudio/cheatsheets){target=\"_blank\"}\n-   Prendre le temps de discuter et de regarder vos données et/ou problèmes\n:::\n\n::: {.column width=\"40%\"}\n![](images/loi_pareto.jpg)\n:::\n:::\n\n## Présentation de Tidyverse {.smaller}\n\n::: columns\n::: {.column width=\"65%\"}\n-   Tidyverse c'est quoi ?\n    -   tidy + universe ou l'univers du «bien rangé» ou du rangement\n    -   Collection d'extensions conçues pour travailler ensemble et basées sur une philosophie commune\n    -   Le cœur du package inclut 8 packages\n        -   [ggplot2](https://ggplot2.tidyverse.org/){target=\"_blank\"} : création de graphiques\n        -   [dplyr](https://dplyr.tidyverse.org/){target=\"_blank\"} : manipulation de données au sens large\n        -   [tidyr](https://tidyr.tidyverse.org/){target=\"_blank\"} : manipulation de données plus orientées variables\n        -   [readr](https://readr.tidyverse.org/){target=\"_blank\"} : import\n        -   [purrr](https://purrr.tidyverse.org/){target=\"_blank\"} : fonction de vectorisation (remplacement des boucles classiques)\n        -   [tibble](https://tibble.tidyverse.org/){target=\"_blank\"} : «évolution» du data.frame\n        -   [stringr](https://stringr.tidyverse.org/){target=\"_blank\"} : manipulation de caractère\n        -   [forcats](https://forcats.tidyverse.org/){target=\"_blank\"} : série d'outils pour aider dans la manipulation des facteurs\n:::\n\n::: {.column width=\"35%\"}\n![](images/hadley_wickham.png){width=\"55%\"} ![](images/tidyverse_packages.png){width=\"55%\"}\n:::\n:::\n\n## Présentation de Tidyverse\n\n-   Lancement de la librairie\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n\n-   Cependant je vous déconseille de faire comme ça\n    -   En lançant cette commande, on charge dans R tous les packages associés à tidyverse (les 8 packages cités précédemment, mais aussi les dépendances associées)\n    -   Avez-vous vraiment besoin de tout cela ?\n    -   Potentiel impact sur vos futurs développements (surtout si vous commencez à développer des packages)\n    -   L'idée est d'appliquer dès maintenant les bonnes pratiques et surtout de comprendre ce que cela implique de ne pas les suivre (ce qui est aussi votre droit !)\n\n## Avant d'aller plus loin\n\n-   L'utilisation de ces packages permet de faire beaucoup de choses, mais ne rend pas tout le reste obsolète\n-   Il y a plusieurs stratégies pour réaliser une action, il faut juste trouver le bon compromis (connaissances, temps de calcul, contexte global de votre projet, ...)\n-   Attention aux règles et conventions de nommages\n    -   Règles pour nommer une variable (obligatoire) : ne pas commencer par un chiffre, pas d'espace, que des caractères alpha-numériques (A-z, 0-9) et le tiret du bas (\\_), ne pas utiliser de mots réservés (comme par exemple TRUE)\n    -   Conventions pour nommer une variable (recommandé) : uniquement des lettres minuscules, séparer les mots des \\_ et les noms choisis doivent pouvoir donner l'information du contenu associé\n\n# Partie 1 : Manipulation de données avec dplyr\n\n## 1.1. Importation de données sous R avec readr\n\n-   Des fonctions de base de R sont dédiées à l'import de fichiers textes de type csv (read.csv) ou avec séparateurs tabulation (read.table)\n-   La librairie readr propose des fonctions similaires sur le principe mais qui diffèrent des fonctions de base sur certains aspects\n-   Elles sont compatibles avec l'esprit Tidyverse car elles permettent de générer des tibbles\n\n## A voir avec Monique\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_reef_fish_abundance_biomass <- read_delim(file = \"./data/global_reef_fish_abundance_and_biomass.csv\",\n                                                 delim = \",\",\n                                                 quote = \"\\\"\")\n# probleme ligne 26 data ori\nsurvey_metadata <- read_delim(file = \"./data/survey_metadata.csv\",\n                              delim = \";\",\n                              skip = 68)\n```\n:::\n\n\n## 1.2. Tranformation des données avec [dplyr](https://dplyr.tidyverse.org/){target=\"_blank\"}\n\n### Pourquoi utiliser dplyr et ca syntaxe ?\n\n- Syntaxe claire et cohérente\n    - \"lien\" avec le SQL\n    - deux \"familles\" de fonctions : résumer et vectorisation\n<br/>\n<br/>\n<br/>\n![](images/summary_function.png){.absolute top=\"395\" left=\"15\"}\n![](images/vectorized_function.png){.absolute top=\"395\" right=\"15\"}\n- Utilisation de verbes\n- Généralement plus rapides que leur équivalent sous R de base\n- Permets d'enchainer les opérations avec des \"pipes\"\n![](images/pipe.png){.absolute top=\"525\" right=\"20\" width=\"15%\"}\n\n## Manipulation des lignes\n\n### Manipulation de type extraction\n\nType de fonctions qui retournent un sous-ensemble de lignes\n\n- Extraction d'une ou plusieurs lignes : fonctions de la famille slice & co\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sélection d'une ou plusieurs lignes par position absolue\nslice()\n# sélection au hasard d'un nombre de lignes ou d'une proportion du jeu de données\nslice_sample()\n# sélection des n dernières lignes\nslice_tail()\n# sélection des n premières lignes\nslice_head()\n# sélection des valeurs distinctes\ndistinct()\n# sélection en fonction d'opérateurs logiques et/ou booléens\nfilter()\n```\n:::\n\n\n## Petit focus sur les opérateurs booléens et logiques {.smaller}\n\nRenvoi une valeur TRUE ou FALSE\n\n- les communs :\n\n![](images/booleens.png)\n\n- certains plus particuliers :\n\n![](images/booleens_particulier.png){width=\"25%\"}\n  \n- Attention aux priorités dans les interprétations\n  - & et plus fort que |, il sera exécuté en premier\n  - une solution est d'utiliser des () pour séparer vos opérateurs\n  \n## Exercice {auto-animate=\"true\"}\n\n- supprimer les données dupliquées dans le jeu de données \"global_reef_fish_abundance_and_biomass\"\n- En une seul fois, selectionner les données dont la variable total est différent de 0, ou la famille de l'espèce est différente de \"Mullidae\" ou \"Kyphosidae\" et pour finir ou la classe de taille associé est <= 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# solution\n```\n:::\n\n\n## Exercice corrigé {auto-animate=\"true\"}\n\n- supprimer les données dupliquées dans le jeu de données \"global_reef_fish_abundance_and_biomass\"\n- En une seul fois, selectionner les données dont la variable total est différent de 0, ou la famille de l'espèce est différente de \"Mullidae\" ou \"Kyphosidae\" et pour finir ou la classe de taille associé est <= 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# solution\ntmp1 <- distinct(.data = global_reef_fish_abundance_biomass)\ntmp2 <- filter(.data = tmp1,\n               total != 0\n               & ! family %in% c(\"Mullidae\",\n                                 \"Kyphosidae\")\n               & size_class <= 10)\n```\n:::\n\n\n## Amélioration de la lisibilité du code\n\nIci on a effectué 2 opérations, mais on peut imaginer en faire beaucoup plus dans la réalité.\n\nGrâce à syntaxe de dplyr, on peut répondre à ce besoin de deux manières différentes.\n\nLa première est d’effectuer toutes les opérations en une fois en les emboîtant :\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntmp1 <- filter(.data = distinct(.data = global_reef_fish_abundance_biomass),\n               total != 0\n               & ! family %in% c(\"Mullidae\",\n                                 \"Kyphosidae\")\n               & size_class <= 10)\n```\n:::\n\n\nCependant cela à plusieurs inconvénients. La structure est peu lisible, les opérations apparaissent dans l’ordre inverse de leur réalisation et il est difficile de voir quel paramètre se rapporte à quelle fonction.\n\n## Aller encore plus loin\n\n### Utilisation d'un nouvelle opérateur baptisé [pipe](https://magrittr.tidyverse.org/ ){target=\"_blank\"} \n\n- Il se note %>%\n\n- Son fonctionnement est le suivant : si j'exécute expr %>% f, le résultat de l’expression expr, à gauche du pipe, sera passé comme premier argument à la fonction f, à droite du pipe, ce qui revient à exécuter f(expr)\n\n- L'intérêt est que l'on peut enchainer plusieurs pipes\n\n- Avec notre exemple précédent cela donne :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# solution\ntmp1 <- distinct(.data = global_reef_fish_abundance_biomass) %>%\n  filter(total != 0\n         & ! family %in% c(\"Mullidae\",\n                           \"Kyphosidae\")\n         & size_class <= 10)\n```\n:::\n\n\n## Encore quelques fonctions de manipulation de lignes\n\n### Manipulation de type \"trie\"\n\n- Ordonner les lignes d'une ou plusieurs colonnes \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# par défaut ordre croissant, utiliser l'argument desc pour ordre décroissant\narrange()\n```\n:::\n\n<br/>\n\n### Manipulation de type \"ajout\"\n\n- Ajouter une ligne dans un jeu de données\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# interet des arguments .before and .after\nadd_row()\n```\n:::\n\n\n## Manipulation des variables\n\n### Extraction d'une ou plusieurs colonnes\n\nType de fonctions qui retournent un sous-ensemble de colonnes sous la forme d'un vecteur ou d'une table\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extraction des valeurs d'une colonne sous la forme d'un vecteur\n# on peut utiliser des noms ou les ids\npull()\n# extraction d'une colonne sous la forme d'une table\n# bien regarder les arguments de la fonction car on peut faire beaucoup\nselect()\n# Changer l'ordre ou la place d'une ou plusieurs colonnes\n# ne pas oublier les arguments .after et .before\nrelocate()\n```\n:::\n\n\n## Fonctions de vectorisation\n\n### Une des deux grandes familles de fonction avec dplyr\n\n- On a commencé à l'aborder de manière instinctive avec relocate()\n\n- Globalement, ce sont des fonctions qui ont un vecteur en entrée et retournent un vecteur de la même taille en sortie\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# créer une nouvelle variable\nmutate()\n# créer une nouvelle variable mais ne conserve pas les anciennes\ntransmute()\n```\n:::\n\n\n- Petit bonus pour renomer les variables \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename()\n```\n:::\n\n\n## Exercice {auto-animate=\"true\" .smaller}\n\n- À partir du jeu de données de sortie de l'exercice précédent\n- Crée une variable \"survey_id_full\" qui est la concaténation des variables survey_id, block et method\n- Placer cette nouvelle colonne au début du jeu de données\n- Supprimer les colonnes survey_id, block et method\n- Renommer la variable size_class en size_class_cm\n- Créer une nouvelle variable size_class_mm qui convertit la variable size_class_cm en mm et supprimer la variable size_class_cm\n- Trier par ordre décroissant les données en fonction de la variable size_class_mm\n- Utiliser des pipes à la fin pour avoir une syntaxe \"propre\" et souffler un bon coup :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# solution\n```\n:::\n\n\n## Exercice corrigé {auto-animate=\"true\" .smaller}\n\n- À partir du jeu de données de sortie de l'exercice précédent\n- Crée une variable \"survey_id_full\" qui est la concaténation des variables survey_id, block et method\n- Placer cette nouvelle colonne au début du jeu de données\n- Supprimer les colonnes survey_id, block et method\n- Renommer la variable size_class en size_class_cm\n- Créer une nouvelle variable size_class_mm qui convertit la variable size_class_cm en mm et supprimer la variable size_class_cm\n- Trier par ordre décroissant les données en fonction de la variable size_class_mm\n- Utiliser des pipes à la fin pour avoir une syntaxe \"propre\" et souffler un bon coup :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# solution\ntmp3 <- mutate(.data = tmp1,\n               survey_id_full = paste(survey_id,\n                                      method,\n                                      block,\n                                      sep = \"_\")) %>%\n  relocate(survey_id_full,\n           .before = survey_id) %>%\n  dplyr::select(-survey_id,\n                -method,\n                -block) %>%\n  rename(size_class_cm = size_class) %>%\n  mutate(size_class_mm = size_class_cm * 10) %>%\n  arrange(desc(size_class_mm)) %>%\n  dplyr::select(-size_class_cm)\n```\n:::\n\n\n# Partie III : Visualisation graphique avec ggplot2\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Nuage de points](images/.png){width=\"\\\"30%\"}\n\n![Boxplots](images/.png){width=\"30%\"}\n\n![Violin Plot](images/.png){width=\"30%\"}\n:::\n\n<center>Un grand nombre d'exemples est disponible sur le site [***from Data to Viz***](https://www.data-to-viz.com/)</center>\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Barplot](images/barplot.png){width=\"30%\"}\n\n![Barplot](images/barplot2.png){width=\"30%\"}\n\n![Barplot Circulaire](images/Figure3.png){width=\"30%\"}\n:::\n\n## Petit apperçu des possibilités :\n\n::: {layout-ncol=\"3\"}\n![Données temporelles](images/Series_temporelles.png){width=\"\\\"30%\"}\n\n![Données temporelles empillées](images/Diagramme_empile.png){width=\"30%\"}\n\n![Cartes](images/map2.png){width=\"30%\"}\n:::\n\n<center>Un grand notre d'exemples est disponible sur le site [***from Data to Viz***](https://www.data-to-viz.com/)</center>\n\n# Partie II : Extension à la manipulation de données, cas spécifiques\n\n## Ggplot c'est comme la chirurgie *`aes`*thétique :\n\n::: incremental\n::: columns\n1)  Les jeunes s'y mettent très tôt !\n\n2)  Les moins jeunes sont réticents puis CERTAINS finissent par s'y mettre\n\n    <center>![](images/nancy_pelosi.jpg){width=\"20%\"}</center>\n\n3)  C'est un enchainement plus ou moins long d'opérations.\n\n    <center>![](images/bogdanoff1.jpg){width=\"21%\"}![](images/bogdanoff1.5.jpg){width=\"25%\"}![](images/bogdanoff2.jpg){width=\"25%\"}</center>\n:::\n:::\n\n## Ggplot, une succession de couches\n\n::: incremental\n::: columns\n::: column\n1.  La Structure\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-15-1.png){width=85%}\n    :::\n    :::\n\n:::\n\n::: column\n2.  Le type de représentation\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-16-1.png){width=85%}\n    :::\n    :::\n\n:::\n:::\n\n::: columns\n::: column\n3.  Les Couleurs\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-17-1.png){width=85%}\n    :::\n    :::\n\n:::\n\n::: column\n4.  Le Lifting final\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-18-1.png){width=85%}\n    :::\n    :::\n\n:::\n:::\n:::\n\n## La structure des données\n\nPour la démonstration nous allons utiliser le jeu de données `crabs` de la librairie `MASS`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\ndata_crabs <- crabs %>% dplyr::select(sp, sex, CL, CW)\n\ndata_crabs %>%\n  head(3) %>%\n  kbl(digits = 4, caption = \"Crabs data\") %>%\n  kable_classic(html_font = \"Computer Modern\", full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Computer Modern; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Crabs data</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sp </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> CL </th>\n   <th style=\"text-align:right;\"> CW </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 16.1 </td>\n   <td style=\"text-align:right;\"> 19.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 18.1 </td>\n   <td style=\"text-align:right;\"> 20.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 19.0 </td>\n   <td style=\"text-align:right;\"> 22.4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Ggplot pas à pas\n\n### 1. Construction de la structure\n\n::: incremental\n<div>\n\nPour la structure du la figure, la fonction à toujours utiliser est `ggplot()` . Les arguments principaux sont :\n\n::: incremental\n-   `data = nom.du.dataframe`\n\n-   `mapping = aes(x = varaible.x, y = variable.y)`\n\n    ::: incremental\n    -   Ici le `aes` signifie **aesthetic**\n\n    -   On verra que d'autres options sont disponibles dans `aes` comme la taille (`size`), la couleur (`color`), la forme (`shape`) ...\n    :::\n:::\n\n</div>\n:::\n\n## Ggplot pas à pas\n\n### 1. Construction de la structure\n\n::: incremental\n<div>\n\nPour la structure du la figure, la fonction à toujours utiliser est `ggplot()` . Les arguments principaux sont :\n\n<div>\n\n-   `data = nom.du.dataframe`\n\n-   `mapping = aes(x = varaible.x, y = variable.y)`\n\n\n    ::: {.cell layout-align=\"center\" warnings='false'}\n    \n    ```{.r .cell-code}\n    couche.1 <- ggplot(data    = data_crabs,\n                       mapping = aes(x = CL, y = CW))\n    couche.1\n    ```\n    \n    ::: {.cell-output-display}\n    ![](tidyverse-training_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n    :::\n    :::\n\n\n</div>\n\n</div>\n:::\n\n## Ggplot pas à pas\n\n### 2. Choix du type de représentation\n\n::: incremental\n::: incremental\nPlusieurs représentations existent selon le type de variables que l'on a :\n:::\n\n::: columns\n::: column\n1.  **Une variable continue**\n\n    ::: incremental\n    -   `geom_histogram()`\n\n    -   `geom_density()`\n    :::\n:::\n\n::: column\n2.  **Deux variables continues**\n\n    ::: incremental\n    -   `geom_point()`\n    -   `geom_line()`\n    -   `geom_area()`\n    :::\n:::\n:::\n:::\n\n::: incremental\n::: columns\n::: column\n3.  **Une discrète & une continue**\n\n    ::: incremental\n    -   `geom_boxplot()`\n    -   `geom_violin()`\n    -   `geom_col()`\n    :::\n:::\n\n::: column\n4.  **Données spatiales**\n\n    ::: incremental\n    -   `geom_polygon()`\n\n    -   `geom_sf()`\n    :::\n:::\n:::\n:::\n\n## 2. Choix du type de représentation\n\n::: incremental\nL'exemple ici va mener à la réalisation d'un nuage de points. Mais `ggplot2` fonctionne de la même façon pour construire un **diagramme en barres**, **une boite à moustache** ou autres.\n\n::: incremental\n::: columns\n::: {.column width=\"50%\"}\n-   `aes()` dans `ggplot()`\n\n\n    ::: {.cell warnings='false'}\n    \n    ```{.r .cell-code}\n    couche.2 <- couche.1 +\n      geom_point()\n    ```\n    :::\n\n:::\n\n::: {.column width=\"50%\"}\n-   `aes()` dans `geom_point()`\n\n\n    ::: {.cell warnings='false'}\n    \n    ```{.r .cell-code}\n    couche.2 <- ggplot() +\n      geom_point(data    = data_crabs,\n                 mapping = aes(x = CL, y = CW))\n    ```\n    :::\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=960}\n:::\n:::\n\n:::\n:::\n:::\n\n## Ggplot pas à pas\n\n3.  Traçons un modèle linéaire et ajoutons la formule qui correspond\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncouche.3 <- couche.2 +\n  geom_smooth(color = \"red\", method = \"lm\") + # le modèle linéaire \n  stat_regline_equation(label.y = 52, aes(label = ..eq.label..)) + # la formule\n  stat_regline_equation(label.y = 48, aes(label = ..adj.rr.label..)) # R²\n\ncouche.3\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n4.  Différencions les mâles et les femelles avec de la couleur\n\n    =\\> Une couleur par ordre. Comme c'est lié à l'esthétisme de la figure, il faut retourner à l'argument `color` dans la fonction `aes`.\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.4 <- ggplot() +\n  geom_point(data    = data_crabs,\n             mapping = aes(x = CL, y = CW,\n                           color = sex))\ncouche.4\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n5.  Modifions les couleurs des points + Le titre de la légende\n\n    Pour cela, on peut utiliser la fonction `scale_color_manual()` et les arguments `name` et `values`.\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.5 <- couche.4 +\n  scale_color_manual(name   = \"Sex :\",\n                     values = c(\"M\" = \"darkblue\", \"F\" = \"darkgreen\"))\ncouche.5\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n*Une autre façon de faire est d'utiliser la fonction `labs` qui permet de changer les diverses légendes (axes x et y + légende de couleur). A vous de jouer !!!*\n\n## Ggplot pas à pas\n\n6.  Nommons proprement les axes + la légende\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.6 <- couche.5 +\n  labs(x = \"Carapace Length (mm)\",\n       y = \"Carapace Width (mm)\",\n       color = \"Sex :\")\ncouche.6\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n7.  Faisons deux plot en un en séparant les données pour les deux espèces.\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.7 <- couche.6 + facet_grid(~sp)\ncouche.7\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ggplot pas à pas\n\n8.  Petit lifting de la couleur de l'arrière plan\n\n\n::: {.cell layout=\"[30, 30, 30]\" warnings='false'}\n\n```{.r .cell-code}\ncouche.7 + theme_bw()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n\n```{.r .cell-code}\ncouche.7 + theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-29-2.png){width=960}\n:::\n\n```{.r .cell-code}\ncouche.7 + theme_dark()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-29-3.png){width=960}\n:::\n:::\n\n\n<center>Un tas de `theme_*` existent pour obtenir différentes formats d'arrière plan (voir [ici](http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements)). A vous de choisir votre préféré.</center>\n\n## Ggplot pas à pas\n\n9.  Le lifting final sur les légendes\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\ncouche.8 <- couche.7 +\n  theme_bw() +\n  theme(axis.text       = element_text(size = 11),\n        axis.title      = element_text(size = 13),\n        legend.position = \"right\",\n        legend.text     = element_text(size = 13),\n        legend.title    = element_text(size = 15))\ncouche.8\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Une petite subtilité concernant les couleurs\n\n::: incremental\n***Exercice :***\n\n1.  *Construire un diagramme en barres représentant la biomasse de chacun des ordres.*\n2.  *Donner une couleur à chacune des barres. Vous devez choisir la couleur.*\n:::\n\n::: incremental\nGgplot fait la différence entre :\n\n-   la couleur des contours -\\> `color = …`\n\n-   la couleur de remplissage -\\> `fill = …`\n\nDe la même façon, pour choisir ses couleurs de contour *vs.* de remplissage, on utilise les fonctions\\\n`scale_color_manual()` *vs.* `scale_fill_manual()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fish_data %>%\n#   group_by(order) %>%\n#   summarise(biomass = sum(biomass)) %>%\n#   ggplot() +\n#   geom_col(data    = fish_data,\n#                     mapping = aes(x = order, \n#                                            y = biomass, \n#                                            fill = order)) +\n#   scale_fill_manual(values = c(\"pink\", \"green\", \"red\", \"blue\", \"yellow\"))\n```\n:::\n\n:::\n\n## Une autre subtilité concernant les couleurs\n\nSelon le type de variable, les fonctions pour choisir les couleurs ne seront pas les mêmes. Pourquoi ?\n\n::: incremental\n***Exercice :***\n\n1.  Construisez un nuage de points biomass\\~total\n2.  Coloriez les points en fonction de la variable abondance en BLEU.\n:::\n\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot <- ggplot() +\n#   geom_point(data    = fish_data,\n#                       mapping = aes(x = total, y = biomass, \n#                                              color = total))\n# plot + scale_color_manual(values = \"blue\")\n```\n:::\n\n:::\n\n<center>On ne peut pas donner une seule couleur à une variable continue !</center>\n\n## Couleurs & variables continues\n\nIl existe 4 fonctions principales qui permettent de construire des pallettes de couleurs continues :\n\n::: incremental\n-   `scale_fill_contiuous` : avec une palette par defaut (nuances de bleus)\n\n-   `scale_fill_viridis_c` : Colorblind friendly.\n\n-   `scale_fill_distiller` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos).\\\n    Pour voir les palettes =\\> `RColorBrewer::display.brewer.all()`\n\n-   `scale_fill_gradient` : permet de créer ses propres gradients de couleurs. Des variantes existent selon le nombre de couleurs à définir. Il s'agit de `scale_fill_gradient2()` et `scale_fill_gradientn()`.\n:::\n\n::: incremental\n<center>Testons les une par une à partir de la figure suivante</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot <- ggplot(faithfuld) +\n#   geom_tile(aes(waiting, eruptions, fill = density)) +\n#   labs(x = \"Waiting\", y = \"Eruptions\", fill = \"Density\") +\n#   theme_bw()\n\nplot <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  scale_x_continuous(NULL, expand = c(0, 0)) + \n  scale_y_continuous(NULL, expand = c(0, 0)) + \n  theme(legend.position = \"none\")\n```\n:::\n\n:::\n\n## `scale_color_continuous`\n\nLa plus simple, mais pas beaucoup d'options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot + scale_fill_continuous()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n## `scale_color_viridis_c`\n\nDe belles palettes dont les nuances sont captées par les personnes albinos.\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"viridis\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-35-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"inferno\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-35-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_viridis_c(option = \"turbo\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-35-3.png){width=960}\n:::\n:::\n\n:::\n\n## `scale_fill_distiller()`\n\nPermet d'utiliser les palettes de couleurs issues de [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"Reds\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"YlGn\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-36-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_distiller(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-36-3.png){width=960}\n:::\n:::\n\n\n::: incremental\nPetite info utile, toutes les palettes peuvent passer le test **ColorBlind Friendly** :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"colorBlindness\")\n# install.packages(\"RColorBrewer\")\n\ncolor_pal <- RColorBrewer::brewer.pal(10, name=\"Spectral\")\ncolorBlindness::displayAllColors(color_pal)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-37-1.png){width=960}\n:::\n:::\n\n:::\n\n## `scale_fill_gradient()`\n\nPermet de créer ces propres palettes de couleurs, à partir de 2, 3 ou n couleurs :\n\n::: incremental\n-   `scale_fill_gradient()` avec les arguments `low` et `high`.\n\n-   `scale_fill_gradient2()` avec les arguments `low`, `mid` et `high`.\n\n-   `scale_fill_gradientn()` avec l'argument `colours`.\n:::\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_gradient(low = \"darkblue\", high = \"darkred\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-38-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_gradient2(low = \"darkblue\", mid = \"white\", high = \"darkred\", midpoint = 0.02)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-38-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_gradientn(colours = colorspace::diverge_hcl(7))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-38-3.png){width=960}\n:::\n:::\n\n:::\n\n## Couleurs & variable groupée en classes\n\nIl existe 3 fonctions principales qui permettent de construire ce type de pallettes de couleurs :\n\n::: incremental\n-   `scale_fill_binned` : avec une palette par defaut (nuances de bleus)\n\n-   `scale_fill_fermenter` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos).\\\n    Pour voir les palettes =\\> `RColorBrewer::display.brewer.all()`\n\n-   `scale_fill_steps` : permet de créer sa propre palette avec un nombre de classes précis. Des variantes existent selon le nombre de couleurs à définir. Il s'agit de `scale_fill_steps2()` et `scale_fill_stepsn()`.\n:::\n\n## `scale_fill_binned()`\n\nLes couleurs sont par défaut des nuances de bleu. Certaines précisions peuvent cependant être apportées.\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_binned(n.breaks = 4)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-39-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_binned(n.breaks = 7,\n                         guide = guide_colorsteps(show.limits = T))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-39-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_binned(breaks = quantile(faithfuld$density, \n                                           probs = (seq(0,1,0.3))))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-39-3.png){width=960}\n:::\n:::\n\n\n## `scale_fill_fermenter()`\n\nLa fonction analogue à `scale_fill_distiller()` et `scale_fill_brewer()` .\n\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"BuGn\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-40-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"BuGn\", direction = 1)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-40-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_fermenter(n.breaks = 8, palette = \"RdBu\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-40-3.png){width=960}\n:::\n:::\n\n\n## `scale_fill_steps()`\n\nFonction analogue à `scale_fill_gradient()`. Permet de créer ces propres palettes de couleurs, à partir de 2, 3 ou n couleurs :\n\n::: incremental\n-   `scale_fill_steps()` avec les arguments `low` et `high`.\n\n-   `scale_fill_steps2()` avec les arguments `low`, `mid` et `high`.\n\n-   `scale_fill_stepsn()` avec l'argument `colours`.\n:::\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_steps(low = \"darkblue\", high = \"darkred\", n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-41-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_steps2(low = \"darkblue\", mid = \"white\", high = \"darkred\", midpoint = 0.02, n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-41-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_stepsn(colors = magma(9), n.breaks = 9)\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-41-3.png){width=960}\n:::\n:::\n\n:::\n\n## Couleurs & variables discrètes\n\nLes principales fonctions utilisées permettant de construire des pallettes de couleurs continues :\n\n::: incremental\n-   `scale_fill_discrete` : Couleurs par défaut\n\n-   `scale_fill_manual` : choix de la couleur parmis toutes les couleurs existantes.\n\n-   `scale_fill_brewer` : utilise les [BrewerPalettes](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) (voir [ici](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) pour plus d'infos). Equivalent de `scale_fill_distiller` pour les variables discrètes.\n:::\n\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot() +\n  geom_violin(data    = data_crabs,\n              mapping = aes(x = sex, y = CL, fill = sex), alpha = 0.7) +\n  facet_wrap(~sp) +\n  theme_bw()\nplot\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-42-1.png){width=960}\n:::\n:::\n\n:::\n\n::: incremental\n\n::: {.cell layout=\"[30, 30, 30]\"}\n\n```{.r .cell-code}\nplot + scale_fill_discrete()\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-43-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_manual(values = c(\"M\" = \"darkblue\", \"F\" = \"darkgreen\"))\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-43-2.png){width=960}\n:::\n\n```{.r .cell-code}\nplot + scale_fill_brewer(palette = \"Set2\")\n```\n\n::: {.cell-output-display}\n![](tidyverse-training_files/figure-revealjs/unnamed-chunk-43-3.png){width=960}\n:::\n:::\n\n:::\n\n## Ressources utilisées\n\nhttps://ggplot2-book.org/scale-colour.html#colour-discrete\n\nhttps://stackoverflow.com/questions/70942728/understanding-color-scales-in-ggplot2\n\nhttps://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n\n## Utiliser ggplot pour détecter des erreurs dans les données\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fish_data <- read_csv(\"data/Global_reef_fish_abundance_and_biomass.csv\")\n\n# Selection des données pour le site n°2000951\n# site1 <- fish_data %>%\n#   filter(survey_id == 2000951) %>%\n#   select(survey_id, class, order, family, species_name, total, biomass)\n# \n# site1 %>%\n#   head(5) %>% \n#   kbl(digits = 4, caption = \"Data to check\") %>% \n#   kable_classic(html_font = \"Computer Modern\", full_width = F)  \n```\n:::\n\n\n</center>\n\nComment détécter les outliers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = site1, mapping = aes(x = order, y = biomass)) +\n#   geom_boxplot() +\n#   theme_bw()\n```\n:::\n\n\n### Séparer les Elasmobranches des Actinoptérygiens\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = site1, mapping = aes(x = order, y = biomass)) +\n#   geom_boxplot() +\n#   facet_grid(.~class, scales = \"free\", space = \"free\") +\n#   theme_bw() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\nInterrogation au niveau des perciformes ...\n\n</center>\n\n### Qu'est-ce qu'il se passe avec les Perciformes ?\n\n<center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# site1 %>%\n#   filter(order == \"Perciformes\") %>%\n#   ggplot(., mapping = aes(x = family, y = biomass)) +\n#   geom_boxplot() +\n#   theme_bw() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\n</center>\n",
    "supporting": [
      "tidyverse-training_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"tidyverse-training_files/libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"tidyverse-training_files/libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}